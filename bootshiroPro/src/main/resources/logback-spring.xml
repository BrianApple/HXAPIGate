<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">

	<!-- 日志输出上下文名称 -->
	<contextName>usThe</contextName>
	<!-- 输出日志到控制台 ConsoleAppender -->
	<appender name="ConsoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
			<!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符-->
			<pattern>1-%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 输出日志到文件  每天一个文件 -->
	<!--输出每天的运行日志到文件SystemOut.log-->
	<appender name="SystemOutFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>/opt/tomcat/logs/bootshiro/SystemOut.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>/opt/tomcat/logs/bootshiro/sys_bak/SystemOut-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!-- 此日志文件记录debug及以上级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 输出日志到文件  每天一个文件 -->
	<!--输出每天的运行日志到文件SystemErrOut.log-->
	<appender name="ErrOutFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>/opt/tomcat/logs/bootshiro/SystemErrOut.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>/opt/tomcat/logs/bootshiro/err_bak/SystemErrOut-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!-- 此日志文件记录error及以上级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 输出日志到文件  文件大小到达指定尺寸的时候文件会自动回滚 -->
	<!-- 输出运行的SQL语句日志到文件SqlOut.log -->
	<appender name="SqlOutFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>/opt/tomcat/logs/bootshiro/SystemSqlOut.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>/opt/tomcat/logs/bootshiro/sql_bak/SystemSqlOut-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
			<charset>utf-8</charset>
		</encoder>
		<!-- 此日志文件记录sql trace -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>



	<!--这个logger的设置是：举例在org.springframework包下面的所有输出日志必须级别level在info及以上级别才会被输出！-->
	<!--这样可以避免输出一些spring框架的许多常见debug信息!-->
	<logger name="org.springframework" level="info"/>
	<logger name="org.json" level="error"/>
	<logger name="io.netty" level="info"/>
	<logger name="org.slf4j" level="info"/>
	<logger name="ch.qos.logback" level="info"/>


	<!-- 生产环境配置文件 -->
	<springProfile name="prod">

		<!-- 下面是打印 mybatis sql语句日志的配置 -->
		<logger name="com.usthe.bootshiro.dao">
			<level value="debug"/>
			<appender-ref ref="SqlOutFileAppender"/>
		</logger>

		<root level="DEBUG">
			<appender-ref ref="ErrOutFileAppender"/>
			<appender-ref ref="SystemOutFileAppender"/>
			<appender-ref ref="ConsoleAppender"/>
		</root>
	</springProfile>

	<!-- 测试环境配置文件 -->
	<springProfile name="test">

		<!-- 下面是打印 mybatis sql语句日志的配置 -->
		<logger name="com.usthe.bootshiro.dao">
			<level value="debug"/>
			<appender-ref ref="SqlOutFileAppender"/>
		</logger>

		<root level="DEBUG">
			<appender-ref ref="ErrOutFileAppender"/>
			<appender-ref ref="SystemOutFileAppender"/>
			<appender-ref ref="ConsoleAppender"/>
		</root>
	</springProfile>

	 <!--开发环境配置文件-->
	<springProfile name="dev">
		<root level="INFO">
			<appender-ref ref="ConsoleAppender"/>
		</root>
	</springProfile>

</configuration>